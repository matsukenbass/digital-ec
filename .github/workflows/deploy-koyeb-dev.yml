name: Deploy to Koyeb
on:
  push:
    branches:
      - develop
  pull_request:
    types:
      - closed

env:
  REGISTRY: ghcr.io

jobs:
  test:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: yarn install --immutable --immutable-cache --check-cache
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Run Playwright tests
        run: yarn test:e2e
        env:
          CI: true
          PAYLOAD_SECRET: ${{secrets.PAYLOAD_SECRET}}
          MONGODB_URL: ${{secrets.MONGODB_URL}}
          NEXT_PUBLIC_SERVER_URL: http://localhost:3000
          RESEND_API_KEY: ${{vars.RESEND_API_KEY}}
          STRIPE_SECRET_KEY: ${{secrets.STRIPE_SECRET_KEY}}
          STRIPE_WEBHOOK_SECRET: ${{secrets.STRIPE_WEBHOOK_SECRET}}
          AWS_REGION: ${{vars.AWS_REGION}}
          S3_ACCESS_KEY_ID: ${{vars.S3_ACCESS_KEY_ID}}
          S3_SECRET_ACCESS_KEY: ${{secrets.S3_SECRET_ACCESS_KEY}}
          AUDIO_BUCKET: ${{vars.AUDIO_BUCKET}}
          MEDIA_BUCKET: ${{vars.MEDIA_BUCKET}}
          PRODUCT_FILES_BUCKET: ${{vars.PRODUCT_FILES_BUCKET}}
          METADATA_DB: ${{vars.METADATA_DB}}
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  build:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Docker login
        run: echo ${{ secrets.GHCR_TOKEN }} | docker login ${{env.REGISTRY}} -u ${{ github.actor }} --password-stdin
      - name: Build and push container image to registry
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ${{env.REGISTRY}}/${{ github.actor }}/${{vars.REGISTRY_NAME}}-dev:latest
          file: ./Dockerfile
          build-args: |
            "PAYLOAD_SECRET=${{secrets.PAYLOAD_SECRET}}"
            "MONGODB_URL=${{secrets.MONGODB_URL}}"
            "NEXT_PUBLIC_SERVER_URL=${{vars.NEXT_PUBLIC_SERVER_URL}}"
            "RESEND_API_KEY=${{vars.RESEND_API_KEY}}"
            "STRIPE_SECRET_KEY=${{secrets.STRIPE_SECRET_KEY}}"
            "STRIPE_WEBHOOK_SECRET=${{secrets.STRIPE_WEBHOOK_SECRET}}"
            "AWS_REGION=${{vars.AWS_REGION}}"
            "S3_ACCESS_KEY_ID=${{vars.S3_ACCESS_KEY_ID}}"
            "S3_SECRET_ACCESS_KEY=${{secrets.S3_SECRET_ACCESS_KEY}}"
            "AUDIO_BUCKET=${{vars.AUDIO_BUCKET}}"
            "MEDIA_BUCKET=${{vars.MEDIA_BUCKET}}"
            "PRODUCT_FILES_BUCKET=${{vars.PRODUCT_FILES_BUCKET}}"
            "METADATA_DB=${{vars.METADATA_DB}}"
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{env.REGISTRY}}/${{ github.actor }}/${{vars.REGISTRY_NAME}}-dev:latest
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
      - name: Install and configure the Koyeb CLI
        uses: koyeb-community/install-koyeb-cli@v2
        with:
          api_token: '${{ secrets.KOYEB_TOKEN }}'
          github_token: '${{ secrets.GITHUB_TOKEN }}'
      - name: Deploy to Koyeb
        run: koyeb service redeploy makemoke-dev/makemoke-dev

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
